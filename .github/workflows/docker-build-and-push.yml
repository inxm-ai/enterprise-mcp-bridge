name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ] # Trigger on tag pushes

permissions:
  contents: write
  packages: write 
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Add this step to set up Docker Buildx with a more capable driver
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/enterprise-mcp-bridge
          tags: |
            type=sha # Tag with the git commit SHA (short format)
            type=raw,value=latest,enable={{is_default_branch}} # Tag with 'latest' only on default branch (main)
            type=ref,event=tag # Tag with the Git tag if a tag is pushed

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile 
          push: true 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Enable build cache from GitHub Actions
          cache-to: type=gha,mode=max # Save build cache to GitHub Actions 
          outputs: type=docker
          platforms: linux/amd64,linux/arm64

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: 'true'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get the previous tag
        id: prev-tag
        run: |
          set -e
          git fetch --tags
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          TAGS=$(git tag --sort=-creatordate)
          PREV_TAG=$(echo "$TAGS" | grep -v "^$CURRENT_TAG$" | head -n 1)
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREV_TAG"
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Get commits since last tag
        id: commits
        run: |
          set -e
          if [ -n "${{ env.PREV_TAG }}" ]; then
            echo "Getting commits since ${{ env.PREV_TAG }}"
            git log ${{ env.PREV_TAG }}..HEAD --oneline > commits.txt
          else
            echo "Getting all commits"
            git log --oneline > commits.txt
          fi
          echo "COMMITS=$(jq -R -s -c 'split("\n") | map(select(. != ""))' commits.txt)" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = context.ref.replace('refs/tags/', '');
            const commits = JSON.parse(process.env.COMMITS);
            const dockerImageLink = `ghcr.io/inxm-ai/enterprise-mcp-bridge:${tagName}`;
            console.log('Creating release for tag:', tagName);
            console.log('Docker image link:', dockerImageLink);
            console.log('Commits since last tag:', commits);
            const releaseBody = [
              `### Docker image`,
              `[${dockerImageLink}](https://ghcr.io/inxm-ai/enterprise-mcp-bridge:${tagName})`,
              '',
              '### Commits since last tag',
              ...commits
            ].join('\n');
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseBody,
              draft: false,
              prerelease: false
            });